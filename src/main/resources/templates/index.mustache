<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP example</title>
    <style>
   h1 {
     font: 2.5em sans-serif;
     line-height: 1.2em;
     color: #CCC;
     text-shadow: 0px 1px #FFF;
   }

      body {
            font-family: Arial, sans-serif;
            font-size: 20px;
            text-align: center;
            margin: 50px;
        }

        label {
            display: block;
            margin-bottom: 10px;
        }

        input[type="radio"] {
            margin-right: 5px;
        }

        button {
            padding: 10px;
            background-color: #3498db;
            color: #fff;
            font-size: 20px;
            border: none;
            cursor: pointer;
        }

    </style>
</head>
<body>

<h1 id="code">{{code}}</h1>
<form method="POST" action="/">
<label>
    <input type="radio" name="trimite" value="email" id="option1" checked="checked"> Email
</label>

<label>
    <input type="radio" name="trimite" value="sms" id="option2"> SMS
</label>
    <input type="text" name="code" style="display:none" value="{{code}}" id="codeInput">
<button onclick="trimiteCod()">Trimite</button>
</form>
<script>
    var RadialProgress = function(size, barSize, barColor, backgroundColor, textColor, zIndex) { // jshint ignore:line
  this.radialProgress = document.createElement('div');
  this.style = document.createElement('style');
  this.progress = 0;
  this.text = 0;
  var requestAnimationFrame = window.requestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame;

  barSize = (barSize % 2 === 1) ? (barSize + 1) : barSize;
  var innerSize = size - barSize;
  var innerMargin = barSize / 2;

  this.radialProgress.className = 'radial-progress';
  this.radialProgress.innerHTML = '<div class="inner-circle">' +
    '<div class="progress">0%<' + '/div>' +
    '</div>' +
    '<div class="outer-circle">' +
    '<div class="mask full">' +
    '<div class="fill"></div>' +
    '</div>' +
    '<div class="mask">' +
    '<div class="fill"></div>' +
    '<div class="fill fix"></div>' +
    '</div>' +
    '</div>';

  this.style.type = 'text/css';
  this.style.innerHTML = '.radial-progress {' +
    'width:' + size + 'px;' +
    'height: ' + size + 'px;' +
    'position: absolute;' +
    'margin: auto;' +
    'top: 0; right: 0; bottom: 0; left: 0;' +
    'z-index: ' + zIndex + ';' +
    'background-color: #DDD;' +
    'border-radius: 50%;' +
    'box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);' +
    '}' +
    '.radial-progress .inner-circle {' +
    'width: ' + innerSize + 'px;' +
    'height: ' + innerSize + 'px;' +
    'position: absolute;' +
    'margin-top: ' + innerMargin + 'px;' +
    'margin-left: ' + innerMargin + 'px;' +
    'background-color: ' + backgroundColor + ';' +
    'border-radius: 50%;' +
    'z-index: 10;' +
    '}' +
    '.radial-progress .inner-circle .progress {' +
    'height: 1em;' +
    'position: absolute;' +
    'margin: auto;' +
    'top: 0; right: 0; bottom: 0; left: 0;' +
    'text-align: center;' +
    'color: ' + textColor + ';' +
    '}' +
    '.radial-progress .outer-circle .mask,' +
    '.radial-progress .outer-circle .fill {' +
    'width: ' + size + 'px;' +
    'height: ' + size + 'px;' +
    'position: absolute;' +
    'border-radius: 50%;' +
    '-webkit-backface-visibility: hidden;' +
    '}' +
    '.radial-progress .outer-circle .mask {' +
    'clip: rect(0px, ' + size + 'px, ' + size + 'px, ' + size / 2 + 'px);' +
    '}' +
    '.radial-progress .outer-circle .mask .fill {' +
    'clip: rect(0px, ' + size / 2 + 'px, ' + size + 'px, 0px);' +
    'background-color: ' + barColor + ';' +
    '}';

  document.getElementsByTagName('head')[0].appendChild(this.style);
  document.body.appendChild(this.radialProgress);

  this.remove = function() {
    var self = this;
    var scale = 1;
    var deltaScale = 0.1 / 10;

    function step() {
      scale += deltaScale;
      scale = (scale < 0) ? 0 : scale;
      self.radialProgress.style.transform = 'scale(' + scale + ')';

      if (scale > 1.1) {
        deltaScale = -1.1 / 8;
      }

      if (scale > 0) {
        requestAnimationFrame(step);
      } else {
        document.getElementsByTagName('head')[0].removeChild(self.style);
        document.body.removeChild(self.radialProgress);
      }
    }

    requestAnimationFrame(step);
  };

  this.setProgress = function(progress, duration, text="0") {
    progress = (progress > 100) ? 100 : progress;
    var self = this;
    this.text = text;
    var $maskFull = this.radialProgress.getElementsByClassName('mask full')[0];
    var $fill = this.radialProgress.getElementsByClassName('fill');
    var $fillFix = this.radialProgress.getElementsByClassName('fill fix')[0];
    var $progress = this.radialProgress.getElementsByClassName('progress')[0];
    var deltaProgress = (progress - this.progress) / (duration * 60);

    function step() {
      self.progress += deltaProgress;
      self.progress = (self.progress > progress) ? progress : self.progress;
      var rotate = self.progress * 1.8;
      $maskFull.style.transform = 'rotate(' + rotate + 'deg)';
      $progress.innerHTML = self.text;

      for (var i = 0; i < $fill.length; ++i) {
        $fill[i].style.transform = 'rotate(' + rotate + 'deg)';
      }

      $fillFix.style.transform = 'rotate(' + 2 * rotate + 'deg)';

      if (self.progress < progress) {
        requestAnimationFrame(step);
      }

    }

    requestAnimationFrame(step);
  };
};

function createProgress() {
  var progress = new RadialProgress(200, 80, '#A52019', '#FFF', '#000', 300);
  let counter = 30;
  setInterval(function() {
    progress.setProgress((100/30)*counter, 1, counter + "s");
    counter = counter - 1;
    if(counter === -1){
    counter = 30;
        fetch("/code", {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json'
    // Add any other headers as needed
  },
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    document.getElementById("code").textContent = data.code;
    document.getElementById("codeInput").value = data.code;
    console.log('Response:', data);
  })
  .catch(error => {
    // Handle errors
    console.error('Error:', error);
  });
    }
  }, 1000);
}

createProgress();
</script>
</body>
</html>
